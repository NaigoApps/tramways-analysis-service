/*
 * Tramways Analysis API
 * Tramways Analysis API
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.tramways.analysis.api.v1;

import it.tramways.analysis.api.ApiException;
import it.tramways.analysis.api.v1.model.Analysis;
import it.tramways.analysis.api.v1.model.AnalysisDescription;
import it.tramways.analysis.api.v1.model.AnalysisRequest;
import it.tramways.analysis.api.v1.model.AnalysisResponse;
import it.tramways.analysis.api.v1.model.AnalysisType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisApi
 */
@Ignore
public class AnalysisApiTest {

    private final AnalysisApi api = new AnalysisApi();

    
    /**
     * Deletes an analysis
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnalysisTest() throws ApiException {
        String projectId = null;
        String mapId = null;
        String analysisId = null;
                api.deleteAnalysis(projectId, mapId, analysisId);
        // TODO: test validations
    }
    
    /**
     * Gets an analysis
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalysisTest() throws ApiException {
        String projectId = null;
        String mapId = null;
        String analysisId = null;
                Analysis response = api.getAnalysis(projectId, mapId, analysisId);
        // TODO: test validations
    }
    
    /**
     * Gets available analysis
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableAnalysisTest() throws ApiException {
        String projectId = null;
        String mapId = null;
                List<AnalysisType> response = api.getAvailableAnalysis(projectId, mapId);
        // TODO: test validations
    }
    
    /**
     * Gets project map analysis
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMapAnalysisTest() throws ApiException {
        String projectId = null;
        String mapId = null;
                List<AnalysisDescription> response = api.getMapAnalysis(projectId, mapId);
        // TODO: test validations
    }
    
    /**
     * Launch selected analysis
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void launchAnalysisTest() throws ApiException {
        AnalysisRequest analysisRequest = null;
                AnalysisResponse response = api.launchAnalysis(analysisRequest);
        // TODO: test validations
    }
    
}
