/*
 * Tramways Analysis API
 * Tramways Analysis API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.tramways.analysis.api.v1;

import it.tramways.analysis.api.ApiCallback;
import it.tramways.analysis.api.ApiClient;
import it.tramways.analysis.api.ApiException;
import it.tramways.analysis.api.ApiResponse;
import it.tramways.analysis.api.Configuration;
import it.tramways.analysis.api.Pair;
import it.tramways.analysis.api.ProgressRequestBody;
import it.tramways.analysis.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import it.tramways.analysis.api.v1.model.Analysis;
import it.tramways.analysis.api.v1.model.AnalysisDescription;
import it.tramways.analysis.api.v1.model.AnalysisRequest;
import it.tramways.analysis.api.v1.model.AnalysisResponse;
import it.tramways.analysis.api.v1.model.AnalysisType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAnalysis
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnalysisCall(String projectId, String mapId, String analysisId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{projectId}/{mapId}/{analysisId}"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mapId" + "\\}", localVarApiClient.escapeString(mapId.toString()))
            .replaceAll("\\{" + "analysisId" + "\\}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnalysisValidateBeforeCall(String projectId, String mapId, String analysisId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteAnalysis(Async)");
        }
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling deleteAnalysis(Async)");
        }
        
        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling deleteAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAnalysisCall(projectId, mapId, analysisId, _callback);
        return localVarCall;

    }

    /**
     * Deletes an analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnalysis(String projectId, String mapId, String analysisId) throws ApiException {
        deleteAnalysisWithHttpInfo(projectId, mapId, analysisId);
    }

    /**
     * Deletes an analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnalysisWithHttpInfo(String projectId, String mapId, String analysisId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnalysisValidateBeforeCall(projectId, mapId, analysisId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an analysis (asynchronously)
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnalysisAsync(String projectId, String mapId, String analysisId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnalysisValidateBeforeCall(projectId, mapId, analysisId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalysis
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisCall(String projectId, String mapId, String analysisId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{projectId}/{mapId}/{analysisId}"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mapId" + "\\}", localVarApiClient.escapeString(mapId.toString()))
            .replaceAll("\\{" + "analysisId" + "\\}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalysisValidateBeforeCall(String projectId, String mapId, String analysisId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAnalysis(Async)");
        }
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling getAnalysis(Async)");
        }
        
        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling getAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = getAnalysisCall(projectId, mapId, analysisId, _callback);
        return localVarCall;

    }

    /**
     * Gets an analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @return Analysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public Analysis getAnalysis(String projectId, String mapId, String analysisId) throws ApiException {
        ApiResponse<Analysis> localVarResp = getAnalysisWithHttpInfo(projectId, mapId, analysisId);
        return localVarResp.getData();
    }

    /**
     * Gets an analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @return ApiResponse&lt;Analysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Analysis> getAnalysisWithHttpInfo(String projectId, String mapId, String analysisId) throws ApiException {
        okhttp3.Call localVarCall = getAnalysisValidateBeforeCall(projectId, mapId, analysisId, null);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an analysis (asynchronously)
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param analysisId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisAsync(String projectId, String mapId, String analysisId, final ApiCallback<Analysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalysisValidateBeforeCall(projectId, mapId, analysisId, _callback);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableAnalysis
     * @param projectId  (required)
     * @param mapId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableAnalysisCall(String projectId, String mapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (mapId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapId", mapId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableAnalysisValidateBeforeCall(String projectId, String mapId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAvailableAnalysis(Async)");
        }
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling getAvailableAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableAnalysisCall(projectId, mapId, _callback);
        return localVarCall;

    }

    /**
     * Gets available analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @return List&lt;AnalysisType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public List<AnalysisType> getAvailableAnalysis(String projectId, String mapId) throws ApiException {
        ApiResponse<List<AnalysisType>> localVarResp = getAvailableAnalysisWithHttpInfo(projectId, mapId);
        return localVarResp.getData();
    }

    /**
     * Gets available analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @return ApiResponse&lt;List&lt;AnalysisType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnalysisType>> getAvailableAnalysisWithHttpInfo(String projectId, String mapId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableAnalysisValidateBeforeCall(projectId, mapId, null);
        Type localVarReturnType = new TypeToken<List<AnalysisType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets available analysis (asynchronously)
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableAnalysisAsync(String projectId, String mapId, final ApiCallback<List<AnalysisType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableAnalysisValidateBeforeCall(projectId, mapId, _callback);
        Type localVarReturnType = new TypeToken<List<AnalysisType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapAnalysis
     * @param projectId  (required)
     * @param mapId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapAnalysisCall(String projectId, String mapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{projectId}/{mapId}"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mapId" + "\\}", localVarApiClient.escapeString(mapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMapAnalysisValidateBeforeCall(String projectId, String mapId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getMapAnalysis(Async)");
        }
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling getMapAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = getMapAnalysisCall(projectId, mapId, _callback);
        return localVarCall;

    }

    /**
     * Gets project map analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @return List&lt;AnalysisDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public List<AnalysisDescription> getMapAnalysis(String projectId, String mapId) throws ApiException {
        ApiResponse<List<AnalysisDescription>> localVarResp = getMapAnalysisWithHttpInfo(projectId, mapId);
        return localVarResp.getData();
    }

    /**
     * Gets project map analysis
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @return ApiResponse&lt;List&lt;AnalysisDescription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnalysisDescription>> getMapAnalysisWithHttpInfo(String projectId, String mapId) throws ApiException {
        okhttp3.Call localVarCall = getMapAnalysisValidateBeforeCall(projectId, mapId, null);
        Type localVarReturnType = new TypeToken<List<AnalysisDescription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets project map analysis (asynchronously)
     * 
     * @param projectId  (required)
     * @param mapId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapAnalysisAsync(String projectId, String mapId, final ApiCallback<List<AnalysisDescription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMapAnalysisValidateBeforeCall(projectId, mapId, _callback);
        Type localVarReturnType = new TypeToken<List<AnalysisDescription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for launchAnalysis
     * @param analysisRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call launchAnalysisCall(AnalysisRequest analysisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analysisRequest;

        // create path and map variables
        String localVarPath = "/analysis/launch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call launchAnalysisValidateBeforeCall(AnalysisRequest analysisRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = launchAnalysisCall(analysisRequest, _callback);
        return localVarCall;

    }

    /**
     * Launch selected analysis
     * 
     * @param analysisRequest  (optional)
     * @return AnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisResponse launchAnalysis(AnalysisRequest analysisRequest) throws ApiException {
        ApiResponse<AnalysisResponse> localVarResp = launchAnalysisWithHttpInfo(analysisRequest);
        return localVarResp.getData();
    }

    /**
     * Launch selected analysis
     * 
     * @param analysisRequest  (optional)
     * @return ApiResponse&lt;AnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisResponse> launchAnalysisWithHttpInfo(AnalysisRequest analysisRequest) throws ApiException {
        okhttp3.Call localVarCall = launchAnalysisValidateBeforeCall(analysisRequest, null);
        Type localVarReturnType = new TypeToken<AnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Launch selected analysis (asynchronously)
     * 
     * @param analysisRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call launchAnalysisAsync(AnalysisRequest analysisRequest, final ApiCallback<AnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = launchAnalysisValidateBeforeCall(analysisRequest, _callback);
        Type localVarReturnType = new TypeToken<AnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
