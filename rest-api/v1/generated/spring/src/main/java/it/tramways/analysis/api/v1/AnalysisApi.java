/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.tramways.analysis.api.v1;

import it.tramways.analysis.api.v1.model.Analysis;
import it.tramways.analysis.api.v1.model.AnalysisDescription;
import it.tramways.analysis.api.v1.model.AnalysisRequest;
import it.tramways.analysis.api.v1.model.AnalysisType;
import it.tramways.analysis.api.v1.model.AnalysisUpdateRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-23T18:21:37.178204400+01:00[Europe/Berlin]")
@Validated
@Api(value = "analysis", description = "the analysis API")
public interface AnalysisApi {

    /**
     * DELETE /analysis/{analysisId} : Deletes an analysis
     *
     * @param analysisId  (required)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Deletes an analysis", nickname = "deleteAnalysis", notes = "", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/analysis/{analysisId}"
    )
    ResponseEntity<Void> deleteAnalysis(@ApiParam(value = "", required = true) @PathVariable("analysisId") String analysisId

);


    /**
     * GET /analysis/{analysisId} : Gets an analysis
     *
     * @param analysisId  (required)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Gets an analysis", nickname = "getAnalysis", notes = "", response = Analysis.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok", response = Analysis.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analysis/{analysisId}",
        produces = { "application/json" }
    )
    ResponseEntity<Analysis> getAnalysis(@ApiParam(value = "", required = true) @PathVariable("analysisId") String analysisId

);


    /**
     * GET /analysis/available : Gets available analysis
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Gets available analysis", nickname = "getAvailableAnalysis", notes = "", response = AnalysisType.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok", response = AnalysisType.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analysis/available",
        produces = { "application/json" }
    )
    ResponseEntity<List<AnalysisType>> getAvailableAnalysis(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "projectId", required = true) String projectId

,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "mapId", required = true) String mapId

);


    /**
     * GET /analysis/{projectId}/{mapId} : Gets project map analysis
     *
     * @param projectId  (required)
     * @param mapId  (required)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Gets project map analysis", nickname = "getMapAnalysis", notes = "", response = AnalysisDescription.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok", response = AnalysisDescription.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analysis/{projectId}/{mapId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<AnalysisDescription>> getMapAnalysis(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId

,@ApiParam(value = "", required = true) @PathVariable("mapId") String mapId

);


    /**
     * POST /analysis/launch : Launch selected analysis
     *
     * @param analysisRequest  (optional)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Launch selected analysis", nickname = "launchAnalysis", notes = "", response = AnalysisDescription.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok", response = AnalysisDescription.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/analysis/launch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AnalysisDescription> launchAnalysis(

@ApiParam(value = "" )   @Valid @RequestBody(required = false) AnalysisRequest analysisRequest);


    /**
     * PUT /analysis/{analysisId} : Updates an analysis parameters
     *
     * @param analysisId  (required)
     * @param analysisUpdateRequest  (optional)
     * @return Ok (status code 200)
     */

    @ApiOperation(value = "Updates an analysis parameters", nickname = "updateAnalysis", notes = "", response = Analysis.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "analysis", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Ok", response = Analysis.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/analysis/{analysisId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Analysis> updateAnalysis(@ApiParam(value = "", required = true) @PathVariable("analysisId") String analysisId

,

@ApiParam(value = "" )   @Valid @RequestBody(required = false) AnalysisUpdateRequest analysisUpdateRequest);

}
